#!/bin/bash

# av1an -i "e6.mkv" --verbose --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 720 -e aom --force -v "--good --bit-depth=10 --end-usage=q --threads=2 --tune=omni --ssim-rd-mult=150 --tune-content=psy --arnr-maxframes=15 --arnr-strength=6 --tpl-strength=8 --enable-cdef=2 --loopfilter-control=3 --quant-sharpness=5 --deltaq-mode=1 --aq-mode=0 --enable-keyframe-filtering=1 --enable-qm=1 --lag-in-frames=48 --sb-size=dynamic --denoise-noise-level=2 --enable-dnl-denoising=0 --cpu-used=3 --cq-level=36" --pix-format yuv420p10le -f "-vf scale=1920:1080:flags=bicubic:param0=0:param1=1/2 -an" --set-thread-affinity 2 -w 12 -o "e6_e.mkv"

INFILE=$1
OUTFILE=$2
EXTENSION=${1##*.}
EXTENSION2=${2##*.}

AV1RED="\033[38;5;161m"
GREY="\033[38;5;248m"
BOLD="\033[1m"
ULINE="\033[4m"
BLINK="\033[5m"
RESET="\033[0m"

INTRO_HELP1="Binaries will be found in a folder called \"rav1ator_cli_encoders\" in your Home directory. Please copy these to your /usr/local/bin folder, which allows you to use Linux programs from anywhere on your computer in the terminal. You can do that by entering the command below."
INTRO_HELPX="Additionally, you may need to install Av1an, zstd, mkvtoolnix-cli, vapoursynth-plugin-lsmashsource, ffmpeg, and other necessary utilities from your package manager before using rav1ator-cli."
INTRO_HELP2="sudo cp ~/rav1ator_cli_encoders/* /usr/local/bin"
INTRO_HELP3="If you're using ZSH, specifically with Oh My ZSH, you may only need to uncomment the second line by removing the \"#\" in front of it in your .zshrc file. You can edit this file by running \"nano ~/.zshrc\""

rav1e_link="https://autumn.revolt.chat/attachments/download/Qn02SIpAKt1TJsnU0LK-TBlDCQZWAGGDJzurvsT7xl"
x265_link="https://autumn.revolt.chat/attachments/download/lgk01Z-Ax5tmBZ2WUNXkbYEN4deAel3aKxNWzD_E2O"
x264_link="https://autumn.revolt.chat/attachments/download/WWeUuEWViblcvNAQRCmrV23ccCe2MJSoZtOmGdy5hQ"
svt_link="https://autumn.revolt.chat/attachments/download/jSawgAFXx62YCk06m0zEucbK45KijUzT4HPMuX6JUu"
aom_link="https://autumn.revolt.chat/attachments/download/OA-woXb8eUPhmB0z4NGZkxn88G_Q5zDpEqusn7DzH1"


# Every time there's an update, this will change & is checked against rav1ator-cli.md5 in the git repo. to generate rav1ator-cli.md5, just `rm rav1ator-cli.md5 && md5sum rav1ator-cli | awk '{print $1}' >> rav1ator-cli.md5`.
script_md5=$(md5sum /usr/local/bin/rav1ator-cli | awk '{print $1}')
version="0.0.3a"

bin_loc=$(which rav1ator-cli)

catrom="bicubic:param0=0:param1=1/2"


if [ $# -ne 2 ]; then
    echo -e "	${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}_${RESET}	      ${GREY}v$version${RESET}"
    echo -e "	${GREY}Usage:${RESET} rav1ator-cli [${AV1RED}input${RESET}] [${AV1RED}output${RESET}]"
    exit 1
fi

if [ -z "$EXTENSION" ]; then
    echo -e "	${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}_${RESET}"
    echo -e "	Please make sure you have a valid input file."
    exit 1
elif [ "$EXTENSION2" != "mkv" ]; then
    echo -e "	${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}_${RESET}"
    echo -e "	Please make sure your output filename has the ${BOLD}.mkv${RESET} file extension."
    exit 1
fi

# Check for updates by checking the script's hash against the latest hash in the git repo. Requires an internet connection.
update_hash_check () {
	str=$(curl -s https://raw.githubusercontent.com/gianni-rosato/rav1ator-cli/main/rav1ator-cli.md5)
	echo "$str"
}

# For development use only; overrides hash check with manual values. Comment out when done using.
# script_md5="DEBUG"
# update_hash_check () {
# 	str="DEBUG"
# 	echo "$str"
# }

# Manual Encoder Installation
encoders_install () {
	str=$(gum confirm "Install relevant encoder binaries?" --selected.background="161" --selected.foreground="15" --unselected.foreground="248" && echo "Yes" || echo "No")
	echo "$str"
}

# Encoder Selection
encoder_select () {
	# Single threaded
	str=$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" x264 x265 aomenc SVT-AV1 rav1e)
	echo "$str"
}

cpu_used_select_text () {
	case $encoder in
		"x264") 
			str="Speed trades time for encoding efficiency. \nOptions are ultrafast, superfast, veryfast, faster, fast, medium, slow, ${ULINE}slower${RESET}, ${ULINE}veryslow${RESET}, or placebo. \nRecommended options are underlined."
			;;
		"x265")
			str="Speed trades time for encoding efficiency. \nOptions are ultrafast, superfast, veryfast, faster, fast, medium, ${ULINE}slow${RESET}, ${ULINE}slower${RESET}, ${ULINE}veryslow${RESET}, or placebo. \nRecommended options are underlined."
			;;
		"aomenc")
			str="CPU Used trades time for encoding efficiency, with lower being slower. \nType a number from 0 to 6. We recommend ${ULINE}3${RESET} or ${ULINE}4${RESET}."
			;;
		"SVT-AV1")
			str="Preset trades time for encoding efficiency, with lower being slower. \nType a number from 0 to 13. We recommend ${ULINE}2${RESET}, ${ULINE}4${RESET}, & ${ULINE}6${RESET}."
			;;
		"rav1e")
			str="Speed trades time for encoding efficiency, with lower being slower. \nType a number from 0 to 10. We recommend ${ULINE}2${RESET} through ${ULINE}8${RESET}."
			;;
	esac
	echo "$str"
}

cpu_used_select () {
	case $encoder in
		"x264") 
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 9 --placeholder "Speed")
			;;
		"x265")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 9 --placeholder "Speed")
			;;
		"aomenc")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "CPU Used (Speed, lower = slower)")
			;;
		"SVT-AV1")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "Preset (Speed, lower = slower)")
			;;
		"rav1e")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "Speed (Speed, lower = slower)")
			;;
	esac
	echo "$str"
}

crf_used_select_text () {
	case $encoder in
		"x264") 
			str="CRF trades file size for quality; lower numbers produce larger, higher-quality files. \nType a number from 1 to 51. We'd recommend ${ULINE}17${RESET} to start."
			;;
		"x265")
			str="CRF trades file size for quality; lower numbers produce larger, higher-quality files. \nType a number from 0 to 51. We'd recommend ${ULINE}21${RESET} to start."
			;;
		"aomenc")
			str="CQ trades file size for quality; lower numbers produce larger, higher-quality files. \nType a number from 0 to 63. We'd recommend ${ULINE}24${RESET} to start."
			;;
		"SVT-AV1")
			str="CRF trades file size for quality; lower numbers produce larger, higher-quality files. \nType a number from 0 to 63. We'd recommend ${ULINE}25${RESET} to start."
			;;
		"rav1e")
			str="Quantizer trades file size for quality; lower numbers produce larger, higher-quality files. \nType a number from 0 to 255. We'd recommend ${ULINE}80${RESET} to start. \nGoing above Quantizer 100 for live-action content is generally not recommended."
			;;
	esac
	echo "$str"
}

crf_used_select () {
	case $encoder in
		"x264") 
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "CRF")
			;;
		"x265")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "CRF")
			;;
		"aomenc")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "CQ")
			;;
		"SVT-AV1")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "CRF")
			;;
		"rav1e")
			str=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 6 --placeholder "Quantizer")
			;;
	esac
	echo "$str"
}

param_text () {
	str="Would you like to input custom encoder parameters? \"Default\" parameters are tested to excel perceptually in SDR at 1080p for live action. \nIf you're encoding HDR video, \"Default\" will not work for you. \nCustom parameters ${BOLD}will overwrite your speed & quality selections, so you'll need to manually specify them here.${RESET}"
	echo "$str"
}

param_select () {
	if [[ "$encoder" == "aomenc" ]]; then
		yn=$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" Default HDR10 Animation Custom)
	elif [[ "$encoder" != "x264" && "$encoder" != "x265" && "$encoder" != "SVT-AV1" ]]; then
		yn=$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" Default HDR10 Custom)
	else
		yn=$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" Default Custom)
	fi
	case $yn in
		"Custom")
			str="$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 72 --placeholder "Custom Encoder Parameters")"
			;;
		"Default")
			case $encoder in
				"x264") 
					str="--threads 2 --open-gop --aq-mode 3 --preset "$speed" --crf "$crf""
					;;
				"x265")
					str="--output-depth 10 --profile main10 --me star --subme 5 --limit-modes --rect --amp --max-merge 5 --no-early-skip --bframes 16 --ref 6 --rc-lookahead 60 --limit-refs 0 --rd 6 --rdoq-level 2 --psy-rdoq 1.00 --no-sao -F 2 -p "$speed" --crf "$crf""
					;;
				"aomenc")
					str="--good --bit-depth=10 --end-usage=q --threads=2 --tune=ssim --ssim-rd-mult=125 --tune-content=psy --arnr-maxframes=15 --arnr-strength=2 --enable-cdef=0 --loopfilter-control=3 --quant-sharpness=3 --deltaq-mode=1 --aq-mode=0 --enable-keyframe-filtering=1 --luma-bias=25 --luma-bias-strength=15 --luma-bias-midpoint=66 --enable-qm=1 --quant-b-adapt=1 --lag-in-frames=48 --sb-size=dynamic --disable-kf --kf-max-dist=9999 --cpu-used=$speed --cq-level=$crf --denoise-noise-level=$grain --enable-dnl-denoising=0"
					;;
				"SVT-AV1")
					str="--input-depth 10 --tune 2 --enable-overlays 1 --enable-qm 1 --qm-min 0 --qm-max 15 --keyint -1 --scd 0 --lp 1 --irefresh-type 1 --crf "$crf" --preset "$speed" --film-grain "$grain" --film-grain-denoise 0"
					;;
				"rav1e")
					str="--tiles 8 --threads 2 --no-scene-detection -s "$speed" --quantizer "$crf" --photon-noise "$grain""
					;;
			esac
			;;
		"HDR10")
			case $encoder in
				"aomenc")
					str="--good --bit-depth=10 --end-usage=q --threads=2 --tune=ssim --ssim-rd-mult=125 --tune-content=psy --arnr-maxframes=15 --arnr-strength=2 --enable-cdef=0 --loopfilter-control=3 --quant-sharpness=3 --deltaq-mode=5 --aq-mode=0 --enable-keyframe-filtering=1 --luma-bias=36 --luma-bias-strength=16 --luma-bias-midpoint=60 --enable-qm=1 --quant-b-adapt=1 --lag-in-frames=48 --sb-size=dynamic --disable-kf --kf-max-dist=9999 --cpu-used=$speed --cq-level=$crf --denoise-noise-level=$grain --enable-dnl-denoising=0 --color-primaries=bt2020 --transfer-characteristics=smpte2084 --matrix-coefficients=bt2020ncl"
					;;
				# "SVT-AV1") COMING SOON!
					# str="--input-depth 10 --tune 2 --enable-overlays 1 --enable-qm 1 --qm-min 0 --qm-max 15 --keyint -1 --scd 0 --lp 1 --irefresh-type 1 --crf "$crf" --preset "$speed" --film-grain "$grain" --film-grain-denoise 0"
					# ;;
				"rav1e")
					str="--tiles 8 --threads 2 --no-scene-detection -s "$speed" --quantizer "$crf" --photon-noise "$grain" --primaries BT2020 --transfer SMPTE2084 --matrix BT2020NCL"
					;;
			esac
			;;
		"Animation")
			case $encoder in
				"aomenc")
					str="--good --bit-depth=10 --end-usage=q --threads=2 --tune=ssim --tune-content=psy --arnr-maxframes=15 --arnr-strength=2 --enable-cdef=0 --loopfilter-control=1 --quant-sharpness=0 --deltaq-mode=1 --enable-chroma-deltaq=1 --aq-mode=0 --enable-keyframe-filtering=1 --luma-bias=0 --enable-qm=1 --lag-in-frames=48 --sb-size=dynamic --disable-kf --kf-max-dist=9999 --dist-metric=qm-psnr --quant-b-adapt=1 --qm-min=0 --qm-max=8 --min-q=1 --cpu-used=$speed --cq-level=$crf --denoise-noise-level=$grain --enable-dnl-denoising=0"
					;;
			esac
			;;
	esac
	echo "$str"
}

grain_text () {
	str="Would you like to add synthetic film grain to your video? \nThis is recommended for AV1 video, at a value of 1 or 2 to start."
	echo "$str"
}

grain_confirmation () {
	yn="$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" Yes No)"
	echo "$yn"
}

grain_select () {
	gamnt=$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "Film Grain Amount ($grain_scale)")
	echo "$gamnt"
}

ffmpeg_text () {
	str="Would you like to input custom FFmpeg parameters? \nIf not, there are preset options in the dropdown below for scaling & cropping your video. \nPlease note that these preset options will not produce an output video with audio, and you'll have to add it later yourself."
	echo "$str"
}

ffmpeg_select () {
	yn=$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" None 1080p 720p "1080p BluRay" "1080p Univisium" Custom)
	case $yn in
		"Custom")
			str="$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 72 --placeholder "Custom FFmpeg Options")"
			;;
		"1080p")
			str="-vf scale=1920:1080:flags=bicubic:param0=0:param1=1/2 -an"
			;;
		"None")
			str="-an"
			;;
		"720p")
			str="-vf scale=1280:720:flags=bicubic:param0=0:param1=1/2 -an"
			;;
		"1080p BluRay")
			str="-vf scale=1920:1080:flags=bicubic:param0=0:param1=1/2,crop=iw:ih-280 -an"
			;;
		"1080p Univisium")
			str="-vf scale=1920:960:flags=bicubic:param0=0:param1=1/2,crop=iw:ih-120 -an"
			;;
	esac
	echo "$str"
}

worker_text () {
	str="Specifying your number of workers tells Av1an how many instances it should spawn of the encoder you selected. \nIf you have a multithreaded CPU, this should be the number of physical cores you have. If not, it is half that. \nTyping 0 allows Av1an to spawn workers automatically, but it is usually conservative. Be cognisant of the amount of RAM available to you."
	echo "$str"
}

worker_select () {
	str="$(gum input --cursor.foreground="161" --prompt.foreground="248" --width 4 --placeholder "Number of Workers")"
	echo "$str"
}

encode_start_select () {
	str="$(gum choose --limit=1 --cursor.foreground="161" --item.foreground="248" Yes No Resume Print)"
	echo "$str"
}

done=0
while [[ $done -eq 0 ]] ; do
	ulimit -n 200000
	echo -e "${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}_${RESET}"
	
	isGumInstalled=$(which gum 2>&1 | awk '{print $2}' 2>&1)
	
	if [ "$isGumInstalled" == "no" ]; then
		echo -e "${GREY}Please install${RESET} gum ${GREY}from your package manager to get started.${RESET}"
		exit 1
	fi
	
	if [ "$bin_loc" != "/usr/local/bin/rav1ator-cli" ]; then
		echo -e "${GREY}Please install${RESET} rav1ator-cli ${GREY}to your /usr/local/bin to started.${RESET}"
		echo -e "${GREY}run${RESET} sudo cp rav1ator-cli /usr/local/bin ${GREY}in your current directory.${RESET}"
		exit 1
	fi
	
	updateCheck=$(update_hash_check)
	if [[ "$script_md5" != "$updateCheck" ]]; then
		curl -sOJ https://raw.githubusercontent.com/gianni-rosato/rav1ator-cli/main/rav1ator-cli
		echo -e "There is a ${BOLD}New Update${RESET} available!"
		echo -e "${GREY}We've downloaded it for you. You can install it by running the following command in your current directory:${RESET}"
		echo -e "sudo cp rav1ator-cli /usr/local/bin"
		exit 1
	elif [[ "$script_md5" == "DEBUG" && "$updateCheck" == "DEBUG" ]]; then
		echo "Skipping update checks. Please disable this behavior once done. Line 61-65"
	fi
	
	manualInstall=$(encoders_install)
	
	case $manualInstall in
		"Yes")
			rm -rf ~/rav1ator_cli_encoders
			mkdir ~/rav1ator_cli_encoders
			cd ~/rav1ator_cli_encoders ; gum spin --spinner.foreground="161" --spinner line --title "Downloading encoder aom-av1-lavish..." -- curl -OJ "$aom_link"
			cd ~/rav1ator_cli_encoders ; gum spin --spinner.foreground="161" --spinner line --title "Downloading encoder SVT-AV1..." -- curl -OJ "$svt_link"
			cd ~/rav1ator_cli_encoders ; gum spin --spinner.foreground="161" --spinner line --title "Downloading encoder rav1e..." -- curl -OJ "$rav1e_link"
			cd ~/rav1ator_cli_encoders ; gum spin --spinner.foreground="161" --spinner line --title "Downloading encoder x264..." -- curl -OJ "$x264_link"
			cd ~/rav1ator_cli_encoders ; gum spin --spinner.foreground="161" --spinner line --title "Downloading encoder x265..." -- curl -OJ "$x265_link"
			gum spin --spinner.foreground="161" --spinner line --title "Decompressing binary archives..." -- zstd -d ~/rav1ator_cli_encoders/*.zst && rm ~/rav1ator_cli_encoders/*.zst
			
			rav1e_sum="$(cd ~/rav1ator_cli_encoders ; sha256sum rav1e | awk '{print $1}' | tr -dc "abcdefg1234567890")"
			x265_sum=$(cd ~/rav1ator_cli_encoders ; sha256sum x265 | awk '{print $1}' | tr -dc "abcdefg1234567890")
			x264_sum=$(cd ~/rav1ator_cli_encoders ; sha256sum x264 | awk '{print $1}' | tr -dc "abcdefg1234567890")
			svt_sum=$(cd ~/rav1ator_cli_encoders ; sha256sum SvtAv1EncApp | awk '{print $1}' | tr -dc "abcdefg1234567890")
			aom_sum=$(cd ~/rav1ator_cli_encoders ; sha256sum aomenc | awk '{print $1}' | tr -dc "abcdefg1234567890")
			
			if [ "$rav1e_sum" != "6c12d77d91b05a2321acae4bc3d9f1d3c7fe532014de6fb4cb623a7f2d75708a" ]; then
				echo -e "$rav1e_sum"
				echo -e "$rav1e_sha256"
				echo -e "${GREY}Bad binary integrity detected:${RESET} rav1e"
				echo -e "${GREY}Please contact the maintainer of rav1ator-cli.${RESET}"
				exit 1
			elif [ "$x265_sum" != "e857e5c8b803de4849e0d75535ef5441008d6360327b7ff67d0e9295195a11e0" ]; then
				echo -e "${GREY}Bad binary integrity detected:${RESET} x265"
				echo -e "${GREY}Please contact the maintainer of rav1ator-cli.${RESET}"
				exit 1
			elif [ "$x264_sum" != "47a872f6485b5b925627c038946646db7a5b105d71c5a34869009b3a38da38d1" ]; then
				echo -e "${GREY}Bad binary integrity detected:${RESET} x264"
				echo -e "${GREY}Please contact the maintainer of rav1ator-cli.${RESET}"
				exit 1
			elif [ "$svt_sum" != "af75eee69583e42aa0c34daa25743567c6ac1be355d4f638d4d3b9e3dfe76d11" ]; then
				echo -e "${GREY}Bad binary integrity detected:${RESET} SvtAv1EncApp"
				echo -e "${GREY}Please contact the maintainer of rav1ator-cli.${RESET}"
				exit 1
			elif [ "$aom_sum" != "ba8ea408bd2cc9758cb384f62a1e580bb7b2bff0bab1716f8d8a3f62d8a61c54" ]; then
				echo -e "${GREY}Bad binary integrity detected:${RESET} aomenc"
				echo -e "${GREY}Please contact the maintainer of rav1ator-cli.${RESET}"
				exit 1
			fi
			
			chmod +x ~/rav1ator_cli_encoders/*
			gum style --foreground 15 --border-foreground 248 --border double --align center --width 74 --margin "0 1" --align="left" --padding "0 1" "$INTRO_HELP1"
			sleep 0.1
			gum style --foreground 15 --border-foreground 161 --border double --align center --width 74 --margin "0 1" --align="left" --padding "0 1" "$INTRO_HELP2"
			sleep 0.1
			gum style --foreground 15 --border-foreground 248 --border double --align center --width 74 --margin "0 1" --padding "0 1" "$INTRO_HELPX"
			sleep 0.1
			gum style --italic --foreground 248 --border-foreground 248 --border double --align center --width 74 --margin "0 1" --padding "1 1" "$INTRO_HELP3"
			sleep 0.1
			echo -ne "${GREY}*Binaries require an AVX2-capable CPU (Haswell or newer) and are highly optimized, so they will almost certainly be faster (and likely also newer) than the default options offered by your package manager. "
			sleep 0.3
			echo -e "\e]8;;https://wiki.x266.mov/blog/av1-encoding-for-dummies/#arch\e\\Link for More Info\e]8;;\e\\"
			exit 1
			;;
		"No")
			echo -e "${GREY}Binary installation aborted.${RESET}\n"
			;;
	esac
	
	echo "Which encoder would you like to select?"
	encoder=$(encoder_select)
	case $encoder in
		"x264") 
			encoder_av1an="x264"
			;;
		"x265")
			encoder_av1an="x265"
			;;
		"aomenc")
			grain_scale="1-50"
			encoder_av1an="aom"
			;;
		"SVT-AV1")
			grain_scale="1-50"
			encoder_av1an="svt-av1"
			;;
		"rav1e")
			grain_scale="1-64"
			encoder_av1an="rav1e"
			;;
	esac
    	echo -e "${GREY}>${RESET} ${AV1RED}$encoder${RESET}\n"
    	
    	speed_string=$(cpu_used_select_text)
    	echo -e "$speed_string"
    	speed=$(cpu_used_select)
    	echo -e "${GREY}>${RESET} ${AV1RED}$speed${RESET}\n"
    	
    	crf_string=$(crf_used_select_text)
    	echo -e "$crf_string"
    	crf=$(crf_used_select)
    	echo -e "${GREY}>${RESET} ${AV1RED}$crf${RESET}\n"

		if [[ "$encoder" != "x264" && "$encoder" != "x265" ]]; then
			grain_string=$(grain_text)
			echo -e "$grain_string"
			grain_confirm=$(grain_confirmation)
			if [ "$grain_confirm" == "Yes" ]; then
				grain=$(grain_select)
				echo -e "${GREY}>${RESET} ${AV1RED}$grain${RESET}\n"
			else
				grain=0
				echo -e "${GREY}No synthetic grain will be added.${RESET}\n"
			fi
    	fi

    	paramtext=$(param_text)
    	echo -e "$paramtext"
    	params="$(param_select)"
    	echo -e "${GREY}>${RESET} ${AV1RED}\"$params\"${RESET}\n"
    	
    	# affinitytext=$(affinity_text)
    	# echo -e "$affinitytext"
    	# affinity=$(affinity_select)
    	# echo -e "${GREY}>${RESET} ${AV1RED}$affinity${RESET}"
    	
    	ffmpegtext=$(ffmpeg_text)
    	echo -e "$ffmpegtext"
    	ffmpegopts="$(ffmpeg_select)"
    	echo -e "${GREY}>${RESET} ${AV1RED}\"$ffmpegopts\"${RESET}\n"
    	
    	worker_string=$(worker_text)
    	echo -e "$worker_string"
    	workers=$(worker_select)
    	echo -e "${GREY}>${RESET} ${AV1RED}$workers${RESET}\n"
    	
    	echo -e "${BOLD}Ready to encode?${RESET}"
    	encode_start=$(encode_start_select)
		echo -e "${GREY}>${RESET} ${AV1RED}$encode_start${RESET}\n"
    	case $encode_start in
    		"Yes")
				gum spin sleep 1.3 --spinner.foreground="161" --spinner line --show-output --title "Generating script..."
    			RAND=$(gum spin md5sum $INFILE --spinner.foreground="161" --spinner line --show-output --title "Hashing input file..." | head -c 6)
    			echo -e "av1an -i \"$INFILE\" --verbose --temp \"rAV1ator-CLI_temp${RAND}\" --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 1080 -e "$encoder_av1an" --force -v \"$params\" --pix-format yuv420p10le -f \"$ffmpegopts\" --set-thread-affinity 2 -w $workers -o \"$OUTFILE\"" > "rAV1ator-CLI_job${RAND}.sh"
    			# av1an -i \"$INFILE\" --verbose --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 1080 -e "$encoder_av1an" --force -v \"$params\" --pix-format yuv420p10le -f \"$ffmpegopts\" --set-thread-affinity 2 -w $workers -o \"$OUTFILE\"
    			chmod +x "rAV1ator-CLI_job${RAND}.sh"
    			gum spin --spinner.foreground="161" --spinner line --title "Executing rAV1ator-CLI_job${RAND}.sh..." -- sleep 0.3
    			./"rAV1ator-CLI_job${RAND}.sh" && rm "rAV1ator-CLI_job${RAND}.sh"
    			# rm -rf "rAV1ator-CLI_temp${RAND}"
    			echo -e "${BOLD}Encoding Finished!${RESET} Thanks for checking out ${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}!${RESET}"
    			;;
    		"No")
    			echo -e "${GREY}Encoding aborted.${RESET}"
    			;;
    		"Resume")
				gum spin sleep 1.3 --spinner.foreground="161" --spinner line --show-output --title "Generating script..."
    			RAND=$(gum spin md5sum $INFILE --spinner.foreground="161" --spinner line --show-output --title "Hashing input file..." | head -c 6)
    			echo -e "av1an -i \"$INFILE\" --verbose --resume --temp \"rAV1ator-CLI_temp${RAND}\" --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 1080 -e "$encoder_av1an" --force -v \"$params\" --pix-format yuv420p10le -f \"$ffmpegopts\" --set-thread-affinity 2 -w $workers -o \"$OUTFILE\"" > "rAV1ator-CLI_job${RAND}.sh"
    			# av1an -i \"$INFILE\" --verbose --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 1080 -e "$encoder_av1an" --force -v \"$params\" --pix-format yuv420p10le -f \"$ffmpegopts\" --set-thread-affinity 2 -w $workers -o \"$OUTFILE\"
    			chmod +x "rAV1ator-CLI_job${RAND}.sh"
    			gum spin --spinner.foreground="161" --spinner line --title "Executing rAV1ator-CLI_job${RAND}.sh..." -- sleep 0.3
    			./"rAV1ator-CLI_job${RAND}.sh" && rm "rAV1ator-CLI_job${RAND}.sh"
    			# rm -rf "rAV1ator-CLI_temp${RAND}"
    			echo -e "${BOLD}Encoding Finished!${RESET} Thanks for checking out ${BOLD}rAV1ator${RESET}${GREY}:${RESET} ${AV1RED}${BOLD}CLI${RESET} ${BOLD}Edition${RESET}${GREY}${BLINK}${BOLD}!${RESET}"
    			;;
			"Print")
				gum spin sleep 1.2 --spinner.foreground="161" --spinner line --show-output --title "Generating script..."
				echo -e "${GREY}Generated script${RESET}${AV1RED}:${RESET} av1an -i \"$INFILE\" --verbose --split-method av-scenechange -m lsmash -c mkvmerge --sc-downscale-height 1080 -e "$encoder_av1an" --force -v \"$params\" --pix-format yuv420p10le -f \"$ffmpegopts\" --set-thread-affinity 2 -w $workers -o \"$OUTFILE\""
    	esac
done=1
done
